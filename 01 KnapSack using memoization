#include <bits/stdc++.h>
using namespace std;
int dp[50][3];
int knapSack(int W,int wt[],int val[],int n)
{
    if(W==0 || n==0)return 0;
    if(dp[W][n]!=-1)return dp[W][n];
    if(wt[n-1]>W)
    {
        return dp[W][n]=knapSack(W,wt,val,n-1);
    }
    else
    {
        return dp[W][n]=max(val[n-1]+knapSack(W-wt[n-1],wt,val,n-1),knapSack(W,wt,val,n-1));
    }
}
int main()
{
    int val[] = { 60, 100, 120 };
    int wt[] = { 10, 20, 30 };
    int W = 50;
    int n = sizeof(val) / sizeof(val[0]);
    for(int i=0;i<=W;i++)
    {
        for(int j=0;j<=n;j++)
        {
            dp[i][j]=-1;
        }
    }
    cout << knapSack(W, wt, val, n);
    return 0;
}
